# import libraries
import logging
import unittest
from unittest import TestCase
# import ogd libraries.
from ogd.common.configs.TestConfig import TestConfig
from ogd.common.utils.Logger import Logger
from ogd.common.schemas.tables.EventMapSchema import EventMapSchema
from ogd.common.schemas.tables.ColumnSchema import ColumnSchema
# import locals
from src.ogd.common.schemas.tables.EventTableSchema import EventTableSchema
from tests.config.t_config import settings

class test_EventTableSchema(TestCase):
    """Testbed for the DataTableConfig class.

        TODO : Implement and enable tests.
    """

    @classmethod
    def setUpClass(cls) -> None:
        # 1. Get testing config
        _testing_cfg = TestConfig.FromDict(name="SchemaTestConfig", unparsed_elements=settings)
        _level     = logging.DEBUG if _testing_cfg.Verbose else logging.INFO
        Logger.std_logger.setLevel(_level)

        # 2. Set up local instance of testing class
        column_map = {
                "session_id"           : "session_id",
                "app_id"               : "app_id",
                "timestamp"            : "timestamp",
                "event_name"           : "event_name",
                "event_data"           : "event_data",
                "event_source"         : "event_source",
                "app_version"          : "app_version",
                "app_branch"           : "app_branch",
                "log_version"          : "log_version",
                "time_offset"          : "offset",
                "user_id"              : "user_id",
                "user_data"            : "user_data",
                "game_state"           : "game_state",
                "event_sequence_index" : "index"
            }

        columns = [
            {
                "name": "session_id",
                "readable": "Session ID",
                "description": "Unique identifier for the gameplay session",
                "type": "str"
            },
            {
                "name": "app_id",
                "readable": "App Name",
                "description": "A string identifying which game from which the event came",
                "type": "str"
            },
            {
                "name": "timestamp",
                "readable": "Timestamp",
                "description": "The time when the event was logged",
                "type": "datetime"
            },
            {
                "name": "event_name",
                "readable": "Event Type",
                "description": "The type of event logged",
                "type": "str"
            },
            {
                "name": "event_data",
                "readable": "Event Data",
                "description": "Data specific to an event type, encoded as a JSON string",
                "type": "json"
            },
            {
                "name": "event_source",
                "readable": "Event Source",
                "description": "An enum member indicating whether the event was generated by the Game, or by a Detector",
                "type": "enum('GAME', 'GENERATED')"
            },
            {
                "name": "app_version",
                "readable": "App Version",
                "description": "The version of the game from which the event came",
                "type": "str"
            },
            {
                "name": "app_branch",
                "readable": "App Branch",
                "description": "The branch of the game from which the event came",
                "type": "str"
            },
            {
                "name": "log_version",
                "readable": "Log Version",
                "description": "The version of the logging code for the game from which the event came",
                "type": "str"
            },
            {
                "name": "offset",
                "readable": "Time Offset",
                "description": "The local offset of the event time from GMT",
                "type": "timezone"
            },
            {
                "name": "user_id",
                "readable": "Player ID",
                "description": "A custom, per-player ID, only exists if player entered an ID on one of our custom portal pages, else null",
                "type": "str"
            },
            {
                "name": "user_data",
                "readable": "User Data",
                "description": "Metadata specific to a user, encoded as a JSON string",
                "type": "json"
            },
            {
                "name": "game_state",
                "readable": "Game State",
                "description": "Metadata about the state of the game when the event occurred, encoded as a JSON string",
                "type": "json"
            },
            {
                "name": "index",
                "readable": "Event-Sequence Index",
                "description": "Counter of events in the session, from 0. A row with session_n = i is the (i+1)-th event of the session",
                "type": "int"
            }
        ]
        cls.test_schema = EventTableSchema(
            name="TestTableSchema",
            column_map=EventMapSchema.FromDict(name="ColumnMap", unparsed_elements=column_map),
            columns=[ColumnSchema.FromDict(name=val.get("name", "UnknownColumn"), unparsed_elements=val) for val in columns]
        )

    @staticmethod
    def RunAll():
        pass

    def test_Name(self):
        _str = self.test_schema.Name
        self.assertIsInstance(_str, str)
        self.assertEqual(_str, "TestTableSchema")

    # @unittest.skip("Not implemented")
    def test_FromDict(self):
        """Test case for whether the FromDict function is working properly.
        """
        _dict = {
            "column_map" : {
                "session_id"           : "session_id",
                "app_id"               : "app_id",
                "timestamp"            : "timestamp",
                "event_name"           : "event_name",
                "event_data"           : "event_data",
                "event_source"         : "event_source",
                "app_version"          : "app_version",
                "app_branch"           : "app_branch",
                "log_version"          : "log_version",
                "time_offset"          : "offset",
                "user_id"              : "user_id",
                "user_data"            : "user_data",
                "game_state"           : "game_state",
                "event_sequence_index" : "index"
            },
            "columns" : [
                {
                    "name": "session_id",
                    "readable": "Session ID",
                    "description": "Unique identifier for the gameplay session",
                    "type": "str"
                },
                {
                    "name": "app_id",
                    "readable": "App Name",
                    "description": "A string identifying which game from which the event came",
                    "type": "str"
                },
                {
                    "name": "timestamp",
                    "readable": "Timestamp",
                    "description": "The time when the event was logged",
                    "type": "datetime"
                },
                {
                    "name": "event_name",
                    "readable": "Event Type",
                    "description": "The type of event logged",
                    "type": "str"
                },
                {
                    "name": "event_data",
                    "readable": "Event Data",
                    "description": "Data specific to an event type, encoded as a JSON string",
                    "type": "json"
                },
                {
                    "name": "event_source",
                    "readable": "Event Source",
                    "description": "An enum member indicating whether the event was generated by the Game, or by a Detector",
                    "type": "enum('GAME', 'GENERATED')"
                },
                {
                    "name": "app_version",
                    "readable": "App Version",
                    "description": "The version of the game from which the event came",
                    "type": "str"
                },
                {
                    "name": "app_branch",
                    "readable": "App Branch",
                    "description": "The branch of the game from which the event came",
                    "type": "str"
                },
                {
                    "name": "log_version",
                    "readable": "Log Version",
                    "description": "The version of the logging code for the game from which the event came",
                    "type": "str"
                },
                {
                    "name": "offset",
                    "readable": "Time Offset",
                    "description": "The local offset of the event time from GMT",
                    "type": "timezone"
                },
                {
                    "name": "user_id",
                    "readable": "Player ID",
                    "description": "A custom, per-player ID, only exists if player entered an ID on one of our custom portal pages, else null",
                    "type": "str"
                },
                {
                    "name": "user_data",
                    "readable": "User Data",
                    "description": "Metadata specific to a user, encoded as a JSON string",
                    "type": "json"
                },
                {
                    "name": "game_state",
                    "readable": "Game State",
                    "description": "Metadata about the state of the game when the event occurred, encoded as a JSON string",
                    "type": "json"
                },
                {
                    "name": "index",
                    "readable": "Event-Sequence Index",
                    "description": "Counter of events in the session, from 0. A row with session_n = i is the (i+1)-th event of the session",
                    "type": "int"
                }
            ]
        }
        _schema = EventTableSchema.FromDict(name="EventTableSchema", unparsed_elements=_dict)
        self.assertIsInstance(_schema.Name, str)
        self.assertEqual(_schema.Name, "EventTableSchema")
        self.assertEqual(_schema.ColumnMap, self.test_schema.ColumnMap)
        self.assertEqual(_schema.Columns, self.test_schema.Columns)

    def test_FromFile_preset(self):
        # try to load from default location
        _schema = EventTableSchema.FromFile(schema_name="OGD_EVENT_FILE")
        self.assertIsInstance(_schema, EventTableSchema)
        self.assertIsInstance(_schema.Name, str)
        self.assertEqual(_schema.Name, "OGD_EVENT_FILE")
        self.assertEqual(_schema.ColumnMap, self.test_schema.ColumnMap)
        self.assertEqual(_schema.Columns, self.test_schema.Columns)

if __name__ == '__main__':
    unittest.main()
